<%= render 'shared/breadcrumbs', context: @argument %>

<p class="statement-heading"><%= @argument.text %></p>

<br />

<p>What is the problem with this argument?</p>

<form action="<%= new_counter_argument_path(@argument) %>" method="get" id="fallacy_radio">
  <% Fallacy.common.each do |fallacy| %>
    <label>
      <input type="radio" name="fallacy_name" value="<%= fallacy.name %>" onchange="$('#fallacy_radio').submit();" <%= @fallacy&.name == fallacy.name ? 'checked' : '' %>/>
      <b><%= fallacy.name %></b>:
      <%= fallacy.description %>
    </label><br />
  <% end %>

  <% if Rails.env.test? %><input type="submit" value="Next"><% end %>
  <br />

</form>

<form action="<%= create_counter_argument_path(@argument) %>" method="post">
  <%= hidden_field_tag :authenticity_token, form_authenticity_token %>

  <input hidden="true" type="text" name="fallacy_name" value="<%= @fallacy&.name %>" />

  <br />
  <% @fallacy.questions.each do |question| %>
    <p><label>
      <span><%= question.label %></span><br />
      <% case question.type
         when :text %>
        <input type="text" class="phrase-input" name="<%= question.name %>" width="<%= question.width %>" onkeyup="update_fill_in()" />
      <% when :select %>
        <select name="<%= question.name %>" onchange="update_fill_in()" />
          <option value=""></option>
          <% question.options.each do |option| %>
            <option value="<%= option %>"><%= option %></option>
          <% end %>
        </select>
      <% end %>
    </label></p>
  <% end %>

  <div class="statement-preview">
    <span>Your statement preview: </span><br />
    <p class="text-preview counter-statement"></p>
  </div>

  <div class="argument-actions">
    <input type="submit" value="Publish" class="publish-button" />
    <%= link_to 'Cancel', @argument %>
  </div>
</form>

<script type="text/javascript">
  /* The results of these inspect calls in Ruby are assumed to be parseable by JavaScript. */
  fill_in = <%= raw @fallacy.fill_in.inspect %>;
  terms = <%= raw @fallacy.questions.map(&:name).inspect %>;

  function escapeHtml(string) {
    return String(string).replace(/[&<>"'`=\/]/g, function (s) {
      return {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
        '/': '&#x2F;',
        '`': '&#x60;',
        '=': '&#x3D;'
      }[s];
    });
  }

  update_fill_in = function() {
    complete = <%= @fallacy.defined? %>;
    any_items = false;
    result = fill_in;

    terms.forEach(function(term) {
      enteredValue = escapeHtml(
        $('input[name="' + term + '"]').val() ||
        $('select[name="' + term + '"]').val() || ''
      ).trim();

      complete = complete && !!enteredValue;
      any_items = any_items || !!enteredValue;

      term_placeholder = '[' + term + ']';

      // Prevent "that that" grammatical error
      if (enteredValue.substr(0,4) == 'that') {
        result = result.replace('that ' + term_placeholder, term_placeholder);
      }

      result = result.replace(term_placeholder, enteredValue ? "<u class='fill_in'>" + enteredValue + "</u>" : '___');
    });
    $('.counter-statement').html(result);
    $('.publish-button').prop('disabled', !complete);
    $('.statement-preview').css('visibility', any_items ? 'visible' : 'hidden');
  }
  update_fill_in();
</script>
